# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида **\n\n***..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: **\n\n.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: **\n\n***.

class Cell():
    def __init__(self, count):
        self.__count = count

    @property
    def count(self):
        return self.__count

    def __add__(self, other):
        assert type(other) is Cell
        return Cell(self.__count + other.__count)

    def __sub__(self, other):
        assert type(other) is Cell
        dif = self.__count - other.__count
        assert dif > 0
        return Cell(dif)

    def __mul__(self, other):
        assert type(other) is Cell
        return Cell(self.__count * other.__count)

    def __truediv__(self, other):
        assert type(other) is Cell
        return Cell(self.__count // other.__count)

    def make_order(self, count_in_row):
        result = ""
        items = range(0, self.__count)
        l = len(items)
        for s in items:
            result += "*"
            if (s+1) % count_in_row == 0 and l - s >= count_in_row:
                result += "\n"
        return result

def l3():
    c1 = Cell(1)
    c2 = Cell(2)

    assert (c1 + c2).count == 3
    assert (c2 - c1).count == 1
    try:
        c1 - c2
    except AssertionError:
        pass
    assert (c1 * c2).count == 2
    assert (c1 / c2).count == 0

    c3 = Cell(16)
    print(c3.make_order(5))

l3()